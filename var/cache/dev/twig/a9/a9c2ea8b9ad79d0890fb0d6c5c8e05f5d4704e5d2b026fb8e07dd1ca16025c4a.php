<?php

use Twig\Environment;
use Twig\Error\LoaderError;
use Twig\Error\RuntimeError;
use Twig\Extension\SandboxExtension;
use Twig\Markup;
use Twig\Sandbox\SecurityError;
use Twig\Sandbox\SecurityNotAllowedTagError;
use Twig\Sandbox\SecurityNotAllowedFilterError;
use Twig\Sandbox\SecurityNotAllowedFunctionError;
use Twig\Source;
use Twig\Template;

/* @app/vendor/symfony/cache/Marshaller/TagAwareMarshaller.php */
class __TwigTemplate_8ffc8e414f73a4fc71e239f45ab2dacbd32c91cedb0c1a49ba344dc041664983 extends Template
{
    private $source;
    private $macros = [];

    public function __construct(Environment $env)
    {
        parent::__construct($env);

        $this->source = $this->getSourceContext();

        $this->parent = false;

        $this->blocks = [
        ];
    }

    protected function doDisplay(array $context, array $blocks = [])
    {
        $macros = $this->macros;
        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02 = $this->extensions["Symfony\\Bridge\\Twig\\Extension\\ProfilerExtension"];
        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02->enter($__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "@app/vendor/symfony/cache/Marshaller/TagAwareMarshaller.php"));

        // line 1
        echo "<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\\Component\\Cache\\Marshaller;

/**
 * A marshaller optimized for data structures generated by AbstractTagAwareAdapter.
 *
 * @author Nicolas Grekas <p@tchwork.com>
 */
class TagAwareMarshaller implements MarshallerInterface
{
    private \$marshaller;

    public function __construct(MarshallerInterface \$marshaller = null)
    {
        \$this->marshaller = \$marshaller ?? new DefaultMarshaller();
    }

    /**
     * {@inheritdoc}
     */
    public function marshall(array \$values, ?array &\$failed): array
    {
        \$failed = \$notSerialized = \$serialized = [];

        foreach (\$values as \$id => \$value) {
            if (\\is_array(\$value) && \\is_array(\$value['tags'] ?? null) && \\array_key_exists('value', \$value) && \\count(\$value) === 2 + (\\is_string(\$value['meta'] ?? null) && 8 === \\strlen(\$value['meta']))) {
                // if the value is an array with keys \"tags\", \"value\" and \"meta\", use a compact serialization format
                // magic numbers in the form 9D-..-..-..-..-00-..-..-..-5F allow detecting this format quickly in unmarshall()

                \$v = \$this->marshaller->marshall(\$value, \$f);

                if (\$f) {
                    \$f = [];
                    \$failed[] = \$id;
                } else {
                    if ([] === \$value['tags']) {
                        \$v['tags'] = '';
                    }

                    \$serialized[\$id] = \"\\x9D\".(\$value['meta'] ?? \"\\0\\0\\0\\0\\0\\0\\0\\0\").pack('N', \\strlen(\$v['tags'])).\$v['tags'].\$v['value'];
                    \$serialized[\$id][9] = \"\\x5F\";
                }
            } else {
                // other arbitratry values are serialized using the decorated marshaller below
                \$notSerialized[\$id] = \$value;
            }
        }

        if (\$notSerialized) {
            \$serialized += \$this->marshaller->marshall(\$notSerialized, \$f);
            \$failed = array_merge(\$failed, \$f);
        }

        return \$serialized;
    }

    /**
     * {@inheritdoc}
     */
    public function unmarshall(string \$value)
    {
        // detect the compact format used in marshall() using magic numbers in the form 9D-..-..-..-..-00-..-..-..-5F
        if (13 >= \\strlen(\$value) || \"\\x9D\" !== \$value[0] || \"\\0\" !== \$value[5] || \"\\x5F\" !== \$value[9]) {
            return \$this->marshaller->unmarshall(\$value);
        }

        // data consists of value, tags and metadata which we need to unpack
        \$meta = substr(\$value, 1, 12);
        \$meta[8] = \"\\0\";
        \$tagLen = unpack('Nlen', \$meta, 8)['len'];
        \$meta = substr(\$meta, 0, 8);

        return [
            'value' => \$this->marshaller->unmarshall(substr(\$value, 13 + \$tagLen)),
            'tags' => \$tagLen ? \$this->marshaller->unmarshall(substr(\$value, 13, \$tagLen)) : [],
            'meta' => \"\\0\\0\\0\\0\\0\\0\\0\\0\" === \$meta ? null : \$meta,
        ];
    }
}
";
        
        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02->leave($__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02_prof);

    }

    public function getTemplateName()
    {
        return "@app/vendor/symfony/cache/Marshaller/TagAwareMarshaller.php";
    }

    public function getDebugInfo()
    {
        return array (  40 => 1,);
    }

    public function getSourceContext()
    {
        return new Source("<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\\Component\\Cache\\Marshaller;

/**
 * A marshaller optimized for data structures generated by AbstractTagAwareAdapter.
 *
 * @author Nicolas Grekas <p@tchwork.com>
 */
class TagAwareMarshaller implements MarshallerInterface
{
    private \$marshaller;

    public function __construct(MarshallerInterface \$marshaller = null)
    {
        \$this->marshaller = \$marshaller ?? new DefaultMarshaller();
    }

    /**
     * {@inheritdoc}
     */
    public function marshall(array \$values, ?array &\$failed): array
    {
        \$failed = \$notSerialized = \$serialized = [];

        foreach (\$values as \$id => \$value) {
            if (\\is_array(\$value) && \\is_array(\$value['tags'] ?? null) && \\array_key_exists('value', \$value) && \\count(\$value) === 2 + (\\is_string(\$value['meta'] ?? null) && 8 === \\strlen(\$value['meta']))) {
                // if the value is an array with keys \"tags\", \"value\" and \"meta\", use a compact serialization format
                // magic numbers in the form 9D-..-..-..-..-00-..-..-..-5F allow detecting this format quickly in unmarshall()

                \$v = \$this->marshaller->marshall(\$value, \$f);

                if (\$f) {
                    \$f = [];
                    \$failed[] = \$id;
                } else {
                    if ([] === \$value['tags']) {
                        \$v['tags'] = '';
                    }

                    \$serialized[\$id] = \"\\x9D\".(\$value['meta'] ?? \"\\0\\0\\0\\0\\0\\0\\0\\0\").pack('N', \\strlen(\$v['tags'])).\$v['tags'].\$v['value'];
                    \$serialized[\$id][9] = \"\\x5F\";
                }
            } else {
                // other arbitratry values are serialized using the decorated marshaller below
                \$notSerialized[\$id] = \$value;
            }
        }

        if (\$notSerialized) {
            \$serialized += \$this->marshaller->marshall(\$notSerialized, \$f);
            \$failed = array_merge(\$failed, \$f);
        }

        return \$serialized;
    }

    /**
     * {@inheritdoc}
     */
    public function unmarshall(string \$value)
    {
        // detect the compact format used in marshall() using magic numbers in the form 9D-..-..-..-..-00-..-..-..-5F
        if (13 >= \\strlen(\$value) || \"\\x9D\" !== \$value[0] || \"\\0\" !== \$value[5] || \"\\x5F\" !== \$value[9]) {
            return \$this->marshaller->unmarshall(\$value);
        }

        // data consists of value, tags and metadata which we need to unpack
        \$meta = substr(\$value, 1, 12);
        \$meta[8] = \"\\0\";
        \$tagLen = unpack('Nlen', \$meta, 8)['len'];
        \$meta = substr(\$meta, 0, 8);

        return [
            'value' => \$this->marshaller->unmarshall(substr(\$value, 13 + \$tagLen)),
            'tags' => \$tagLen ? \$this->marshaller->unmarshall(substr(\$value, 13, \$tagLen)) : [],
            'meta' => \"\\0\\0\\0\\0\\0\\0\\0\\0\" === \$meta ? null : \$meta,
        ];
    }
}
", "@app/vendor/symfony/cache/Marshaller/TagAwareMarshaller.php", "C:\\wamp64\\www\\QuillBlog\\vendor\\symfony\\cache\\Marshaller\\TagAwareMarshaller.php");
    }
}
