<?php

use Twig\Environment;
use Twig\Error\LoaderError;
use Twig\Error\RuntimeError;
use Twig\Extension\SandboxExtension;
use Twig\Markup;
use Twig\Sandbox\SecurityError;
use Twig\Sandbox\SecurityNotAllowedTagError;
use Twig\Sandbox\SecurityNotAllowedFilterError;
use Twig\Sandbox\SecurityNotAllowedFunctionError;
use Twig\Source;
use Twig\Template;

/* @app/vendor/symfony/doctrine-bridge/CacheWarmer/ProxyCacheWarmer.php */
class __TwigTemplate_752c98ae86e40b584846b7ac53067271751e3850ce4327a7c91cc699d7c042e0 extends Template
{
    private $source;
    private $macros = [];

    public function __construct(Environment $env)
    {
        parent::__construct($env);

        $this->source = $this->getSourceContext();

        $this->parent = false;

        $this->blocks = [
        ];
    }

    protected function doDisplay(array $context, array $blocks = [])
    {
        $macros = $this->macros;
        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02 = $this->extensions["Symfony\\Bridge\\Twig\\Extension\\ProfilerExtension"];
        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02->enter($__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "@app/vendor/symfony/doctrine-bridge/CacheWarmer/ProxyCacheWarmer.php"));

        // line 1
        echo "<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\\Bridge\\Doctrine\\CacheWarmer;

use Doctrine\\Persistence\\ManagerRegistry;
use Symfony\\Component\\HttpKernel\\CacheWarmer\\CacheWarmerInterface;

/**
 * The proxy generator cache warmer generates all entity proxies.
 *
 * In the process of generating proxies the cache for all the metadata is primed also,
 * since this information is necessary to build the proxies in the first place.
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */
class ProxyCacheWarmer implements CacheWarmerInterface
{
    private \$registry;

    public function __construct(ManagerRegistry \$registry)
    {
        \$this->registry = \$registry;
    }

    /**
     * This cache warmer is not optional, without proxies fatal error occurs!
     *
     * @return false
     */
    public function isOptional()
    {
        return false;
    }

    /**
     * {@inheritdoc}
     */
    public function warmUp(string \$cacheDir)
    {
        foreach (\$this->registry->getManagers() as \$em) {
            // we need the directory no matter the proxy cache generation strategy
            if (!is_dir(\$proxyCacheDir = \$em->getConfiguration()->getProxyDir())) {
                if (false === @mkdir(\$proxyCacheDir, 0777, true)) {
                    throw new \\RuntimeException(sprintf('Unable to create the Doctrine Proxy directory \"%s\".', \$proxyCacheDir));
                }
            } elseif (!is_writable(\$proxyCacheDir)) {
                throw new \\RuntimeException(sprintf('The Doctrine Proxy directory \"%s\" is not writeable for the current system user.', \$proxyCacheDir));
            }

            // if proxies are autogenerated we don't need to generate them in the cache warmer
            if (\$em->getConfiguration()->getAutoGenerateProxyClasses()) {
                continue;
            }

            \$classes = \$em->getMetadataFactory()->getAllMetadata();

            \$em->getProxyFactory()->generateProxyClasses(\$classes);
        }
    }
}
";
        
        $__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02->leave($__internal_319393461309892924ff6e74d6d6e64287df64b63545b994e100d4ab223aed02_prof);

    }

    public function getTemplateName()
    {
        return "@app/vendor/symfony/doctrine-bridge/CacheWarmer/ProxyCacheWarmer.php";
    }

    public function getDebugInfo()
    {
        return array (  40 => 1,);
    }

    public function getSourceContext()
    {
        return new Source("<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\\Bridge\\Doctrine\\CacheWarmer;

use Doctrine\\Persistence\\ManagerRegistry;
use Symfony\\Component\\HttpKernel\\CacheWarmer\\CacheWarmerInterface;

/**
 * The proxy generator cache warmer generates all entity proxies.
 *
 * In the process of generating proxies the cache for all the metadata is primed also,
 * since this information is necessary to build the proxies in the first place.
 *
 * @author Benjamin Eberlei <kontakt@beberlei.de>
 */
class ProxyCacheWarmer implements CacheWarmerInterface
{
    private \$registry;

    public function __construct(ManagerRegistry \$registry)
    {
        \$this->registry = \$registry;
    }

    /**
     * This cache warmer is not optional, without proxies fatal error occurs!
     *
     * @return false
     */
    public function isOptional()
    {
        return false;
    }

    /**
     * {@inheritdoc}
     */
    public function warmUp(string \$cacheDir)
    {
        foreach (\$this->registry->getManagers() as \$em) {
            // we need the directory no matter the proxy cache generation strategy
            if (!is_dir(\$proxyCacheDir = \$em->getConfiguration()->getProxyDir())) {
                if (false === @mkdir(\$proxyCacheDir, 0777, true)) {
                    throw new \\RuntimeException(sprintf('Unable to create the Doctrine Proxy directory \"%s\".', \$proxyCacheDir));
                }
            } elseif (!is_writable(\$proxyCacheDir)) {
                throw new \\RuntimeException(sprintf('The Doctrine Proxy directory \"%s\" is not writeable for the current system user.', \$proxyCacheDir));
            }

            // if proxies are autogenerated we don't need to generate them in the cache warmer
            if (\$em->getConfiguration()->getAutoGenerateProxyClasses()) {
                continue;
            }

            \$classes = \$em->getMetadataFactory()->getAllMetadata();

            \$em->getProxyFactory()->generateProxyClasses(\$classes);
        }
    }
}
", "@app/vendor/symfony/doctrine-bridge/CacheWarmer/ProxyCacheWarmer.php", "C:\\wamp64\\www\\QuillBlog\\vendor\\symfony\\doctrine-bridge\\CacheWarmer\\ProxyCacheWarmer.php");
    }
}
